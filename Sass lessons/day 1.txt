sass main.scss main.css // compile 

span {
  font-size: 24px;
  line-height: 200px;   / center nested
}


NESTING
.banner {
  font-family: 'Pacifico', cursive;
  height: 400px;
  background-image: url("lemonade.jpg");

  border:{
    top: 4px solid black;
    bottom: 4px solid black;
  }
	  .slogan {
 		 position: absolute;
 		 border: 4px solid black;
 			 top: 200px;
			  left: 25%;
			  width: 50%;
					  height: 200px;
			  text-align: center;
      span {
  font-size: 24px;
  line-height: 200px;
}
	}
}

--------------------
Variables in scss
$icon-square-length: 300px; 
//sample

-----
data types 
//list
1.5em Helvetica bold;  
or
Helvetica, Arial, sans-serif;
//maps
(key1: value1, key2: value2);

$standard-border: 4px solid black -  //sample of variable in scss
--
psuedo class 
:: before ::after :hover
-------
the & character is used to specify exactly
where a parent selector should be inserted. I
t also helps write psuedo classes in a much less 
.notecard{ 
  &:hover{
      @include transform (rotatey(-180deg));  
    }
  }
---
mixin lets you make group of css declarations
@mixin backface-visibility {
  backface-visibility: hidden;
  -webkit-backface-visibility: hidden;
  -moz-backface-visibility: hidden;
  -ms-backface-visibility: hidden;
  -o-backface-visibility: hidden;
}

.front, .back {
  width: 100%;
  height: 100%;
  position: absolute;
  @include backface-visibility;
}
---------
Mixins can take multiple arguments.
Sass allows you to explicitly define each argument in your @include statement.
When values are explicitly specified you can send them out of order.
If a mixin definition has a combination of arguments with and without a default value, 
you should define the ones with no default value first.
Mixins can be nested.
------------

-moz- for firefox 
-webkit for chrome safari
-o for opera 
-ms for Internet explorer
-----
Map format or multiple arguments
//variable
$stripe-properties: to bottom, 15%, blue, white;
//insert
definition {
    @include stripes($stripe-properties...);
  }
---
string interpolation
@mixin photo-content($file) {
  content: url(#{$file}.jpg); //string interpolation
  object-fit: cover;
}

//....

.photo { 
  @include photo-content('titanosaur');
  width: 60%;
  margin: 0px auto; 
  }

---
//&selector inside the mixins
@mixin text-hover($color){
  &:hover {
      color: $color; 
  }
}
//insert
@include text-hover(red);
---
color functions
fade-out 
fade-in
adjust-hue($color, $degrees)

$lagoon-blue: fade-out(#62fdca, 0.5);
.math {
    background-color: $lagoon-blue;
 }
--
SASS CAN FUCKING COMPUTE COLORS
$color: #010203 + #040506;   = // equals to color: #050709;
or
color : red + blue ;
--- 
sass arithmetic operations are like with javascript
+ - * / %
$width: 250px;
.math{
height: $width/6;
line-height: $width/6;
}

-------
loops 
@each $item in $list {
  .#{$item} {
    background: $item;
  }
}

-----------
for loops 
@for $i from $begin through $end {
   //some rules and or conditions
}

$1 $i is just a variable for the index, or position of the element in the list
$begin and $end are placeholders for the start and end points of the loop.
The keywords //through and //to are interchangeable in Sass

$total: 10; //Number of .ray divs in our html
$step: 360deg / $total; //Used to compute the hue based on color-wheel

@for $i from 1 through $total {
  .ray:nth-child(#{$i}){
    background: adjust-hue(blue, i$ * $step);
  }
}
.ray {
  height: 30px;
}
--------------------------------
if and if else 
$total: 10; //Number of .ray divs in our html
$step: 360deg / $total; //Used to compute the hue based on color-wheel


.ray {
  height: 30px;
}

//Add your for-loop here:
@for $i from 1 through $total {
	.ray:nth-child(#{$i}){
		background: adjust-hue(blue, $i * $step);
    		width: if($i % 2 == 0, 300px, 350px);
		margin-left: if($i % 2 == 0, 0px, 50px);
	}
}

//sample
@mixin deck($suit) {
 @if($suit == hearts || $suit == spades){
   color: blue;
 }
 @else-if($suit == clovers || $suit == diamonds){
   color: red;
 }
 @else{
   //some rule
 }
}
----
  width: if($i % 2 == 0, 300px, 350px);
		margin-left: if($i % 2 == 0, 0px, 50px);

------------------
_  to hold off on compiling the file individually and instead import it
_filename.scss
@import "variables";


 @import "helper/variables";
helper refers to resources like variables mixins and functions

----------------
Placeholders %
Placeholders prevent rules from being rendered to CSS on their own and
only become active once they are extended anywhere an id or class could be extended.

--
@mixin no-variable {
  font-size: 12px;
  color: #FFF;
  opacity: .9;
}

%placeholder {
  font-size: 12px;
  color: #FFF;
  opacity: .9;
}

span {
  @extend %placeholder;
}

div {
  @extend %placeholder;
}

p {
  @include no-variable;
}

h1 {
  @include no-variable;
}
	

